name: DirectDrive Authority Engine Deployment

on:
  push:
    branches: [ main ]
  workflow_run:
    workflows: ["DirectDrive Authority Engine CI"]
    branches: [ main ]
    types: [ completed ]

env:
  NODE_VERSION: '20'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.event.workflow_run.conclusion == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Vercel CLI
      run: npm i -g vercel@latest
      
    - name: Pull Vercel environment information
      run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: Build project artifacts
      run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: Deploy to Staging
      id: deploy-staging
      run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} > staging-url.txt
      
    - name: Get staging URL
      run: echo "STAGING_URL=$(cat staging-url.txt)" >> $GITHUB_ENV
      
    - name: Run staging smoke tests
      run: |
        sleep 30  # Wait for deployment to be ready
        npm run test:smoke -- --base-url=${{ env.STAGING_URL }}
        
    - name: Comment staging URL on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'üöÄ Staging deployment ready: ${{ env.STAGING_URL }}'
          })

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: https://directdrive-authority.vercel.app
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Vercel CLI
      run: npm i -g vercel@latest
      
    - name: Pull Vercel environment information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: Build project artifacts
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: Deploy to Production
      id: deploy-production
      run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: Run production health checks
      run: |
        sleep 60  # Wait for deployment to be ready
        npm run test:health-check -- --base-url=https://directdrive-authority.vercel.app
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "‚úÖ Production deployment successful!"
        echo "üåê Live URL: https://directdrive-authority.vercel.app"
        
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Production deployment failed!"
        echo "üîÑ Automatic rollback initiated..."

  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: deploy-production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Vercel CLI
      run: npm i -g vercel@latest
      
    - name: Rollback to previous version
      run: |
        PREVIOUS_DEPLOYMENT=$(vercel ls --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }} | grep "directdrive-authority" | sed -n '2p' | awk '{print $2}')
        vercel rollback $PREVIOUS_DEPLOYMENT --timeout 60s --token=${{ secrets.VERCEL_TOKEN }}
        
    - name: Notify rollback completion
      run: echo "üîÑ Emergency rollback completed to previous stable version"